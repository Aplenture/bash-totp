#!/bin/bash

# Aplenture 2024
# CLI to use TOTP
# inspried by Scott Nicholas bash-totp
# see https://github.com/neutronscott/bash-totp

COMMAND=$1

savefile="tokens.save"

tokens=()

# bash3 compat
if (( ${BASH_VERSINFO[0]} < 4 )); then
  toupper() { echo "$1" | tr '[:lower:]' '[:upper:]'; }
  epoch() { awk 'BEGIN{srand(); print srand()}'; }
else
  toupper() { printf '%s' "${1^^}"; }
  epoch() { printf '%(%s)T' -1; }
fi

# xxtea(key, text, d)
#   key: is hex string of 16 byte (128 bit) length
#   text: hex-string of arbitrary length
#   d: anything here means to decrypt instead of encrypt
xxtea() {
  local key=$1 text=$2 d=$3 i t hex m=$((0xFFFFFFFF))
  local v n k z y sum e p q delta=2654435769 #0x9e3779b9

  #make k an array of 32-bit int
  for ((n = i = 0; i < ${#key}; i += 8)); do
    k[n++]=$(( 16#${key:i:8} ))
  done
  #make v an array of 32-bit int
  for ((n = i = 0; i < ${#text}; i += 8)); do
    v[n++]=$(( 16#${text:i:8} ))
  done

  ((q = 6 + 52/n))
#  declare -p v k q >&2
  if [[ -z "$d" ]]; then
    (( z = v[n-1], sum = 0 ))

    while ((q-- > 0)); do
      (( sum += delta, e = (sum >> 2) & 3 ))
      for ((p = 0; p < n - 1; p++)); do
        ((
          y = v[p+1], mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z), z = v[p] = ( v[p] + mx ) & m
        ))
      done
      ((
        y = v[0], mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z), z = v[n-1] = ( v[n-1] + mx ) & m
      ))
    done
  else
    (( sum = (q * delta) & m, y = v[0] ))

    while ((q-- > 0)); do
      (( e = (sum >> 2) & 3 ))
      for ((p = n - 1; p > 0; p--)); do
        ((
          z = v[p-1], mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z), y = v[p] = (v[p] - mx) & m
        ))
      done
      ((
        z = v[n-1], mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z), y = v[0] = ( v[0] - mx ) & m,
        sum -= delta
      ))
    done
  fi

#  declare -p v >&2
  hex=''
  for ((i = 0; i < ${#v[@]}; i++)); do
    printf -v h '%08X' "${v[i]}"
    printf -v hex '%s%s' "$hex" "${h:6:2}${h:4:2}${h:2:2}${h:0:2}" >&2
  done
#  printf 'H: %s\n' "$hex" >&2
  echo "$hex"
}

swab() {
  local i h hex v=$1
  for ((i = 0; i < ${#v}; i += 8)); do
    h=${v:i:8}
    printf -v hex '%s%s' "$hex" "${h:6:2}${h:4:2}${h:2:2}${h:0:2}"
  done
  printf '%s\n' "$hex"
}

# str2hex(str, [padded width])
#          str: arbitary string
# padded width: add zeros until this width
str2hex() {
  local str=$1 pad=${2:- 0} i hex

  for ((i = 0; i < ${#str}; i++)); do
    printf -v hex '%s%02x' "$hex" "'${str:i:1}"
  done
  while (( pad && ${#hex} % pad )); do
    hex="${hex}00"
  done
  printf '%s' "$hex"
}

hex2str() {
  local hex=$1 i str

  for ((i = 0; i < ${#hex}; i+=2)); do
    printf -v str "%s\x${hex:i:2}" "$str"
  done
  printf '%s' "$str"
}

# pad80(in, c)
#   in: hex string input
#    c: congruency
pad80() {
  local in=$1 c=$2

  printf -v in '%s80' "$in"
  while (( ${#in} % 128 != c )); do
    printf -v in '%s00' "$in"
  done
  printf '%s\n' "$in"
}

hmac_sha512() { printf %s "$2" | xxd -r -p | openssl dgst -sha512 -mac hmac -macopt hexkey:$1 | cut -f2 -d' '; }
hmac_sha256() { printf %s "$2" | xxd -r -p | openssl dgst -sha256 -mac hmac -macopt hexkey:$1 | cut -f2 -d' '; }
hmac_sha1o()  { printf %s "$2" | xxd -r -p | openssl dgst -sha1   -mac hmac -macopt hexkey:$1 | cut -f2 -d' '; }

##########################################################################
# SHA-1 in bash
# Reference implementation from: https://en.wikipedia.org/wiki/SHA-1
##########################################################################

hmac_sha1() {
  local key=$1 msg=$2 i
  # key needs to be same as sha1 blocksize
  if (( ${#key} > 128 )); then
    key=$(sha1 "$key")
  fi
  while (( ${#key} < 128 )); do
    key=${key}00
  done

  #xor key 32-bit at a time
  for ((i = 0; i < 128; i += 8)); do
    printf -v ipad '%s%08X' "$ipad" "$(( ( ( 16#${key:i:8} ) ^ 0x36363636 ) & 0xFFFFFFFF ))"
    printf -v opad '%s%08X' "$opad" "$(( ( ( 16#${key:i:8} ) ^ 0x5C5C5C5C ) & 0xFFFFFFFF ))"
  done

  sha1 "${opad}$(sha1 "${ipad}${msg}")"
}

sha1() {
  local in=$1 msg
  local h0 h1 h2 h3 h4
  local a b c d e f
  local i j temp len plen chunk w
  local m=$((0xFFFFFFFF)) #32-bit mask

  (( h0=0x67452301, h1=0xEFCDAB89, h2=0x98BADCFE, h3=0x10325476, h4=0xC3D2E1F0 ))

  (( len = ${#in} << 2 ))
  msg=$(pad80 "$in" 112)
  printf -v msg '%s%016X' "$msg" "$len"
  plen=${#msg}
  
  # 512-bit chunks = 128 hex chars
  for ((i = 0; i < plen; i += 128)); do
    chunk=${msg:i:128} 
    for ((j = 0; j < 16; j++)); do
      # convert to 32-bit int now
      w[j]=$(( 16#${chunk:8 * j:8} ))
    done
    # extend into 80 qwords
    for ((j = 16; j <= 79; j++)); do
      (( w[j] = w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16] ))
      # left rotate 1 with shift
      (( w[j] = ( w[j] >> 31 ) | ( w[j] << 1 ) ))
      (( w[j] &= m ))
    done
    (( a = h0, b = h1, c = h2, d = h3, e = h4 ))
    for ((j = 0; j <= 79; j++)); do
      if (( j <= 19 )); then
        (( k = 0x5A827999, f = ( b & c ) | (~b & d) )) 
      elif (( j <= 39 )); then
        (( k = 0x6ED9EBA1, f = b ^ c ^ d )) 
      elif (( j <= 59 )); then
        (( k = 0x8F1BBCDC, f = (b & c) | (b & d) | (c & d) )) 
      else
        (( k = 0xCA62C1D6, f = b ^ c ^ d )) 
      fi
      (( f &= m ))
      (( temp = ( ( a << 5 ) | ( a >> 27 ) ) + f + e + k + w[j] ))
      (( temp &= m ))
      (( e = d, d = c, c = ( b >> 2 ) | ( b << 30 ), b = a, a = temp ))
    done
    (( h0 += a, h1 += b, h2 += c, h3 += d, h4 += e ))
    (( h0 &= m, h1 &= m, h2 &= m, h3 &= m, h4 &= m ))
  done
  printf '%08x%08x%08x%08x%08x\n' "$h0" "$h1" "$h2" "$h3" "$h4"
}

# totp(key, hash[, step[, digits]])
#    key: hex encoded
#   step: usually 30 seconds
# digits: 6 (default) or 8
totp() {
  local key=$1 hash=$2 step=${3:- 30} digits=${4:- 6} time

  time=$(epoch)
  printf -v step '%016X' "$((time / step))"
  case $hash in
    sha512) dgst=$(hmac_sha512 "$key" "$step") ;;
    sha256) dgst=$(hmac_sha256 "$key" "$step") ;;
     sha1o) dgst=$(hmac_sha1o  "$key" "$step") ;;
         *) dgst=$(hmac_sha1   "$key" "$step") ;;
  esac

  offset=$(( 2 * 16#${dgst: -1} ))
  token=$(( ( 16#${dgst:offset:8} & 0x7fffffff ) % 10**digits ))
  printf '%06d\n' "$token"
}

base32d() {
  local in=$(toupper "$1") c buffer idx bitsLeft=0 count=0 result
  local v='ABCDEFGHIJKLMNOPQRSTUVWXYZ234567!'
  for ((i = 0; i < ${#in}; i++ )); do
    c=${in:i+j:1}
    [[ $c = [[:space:]-] ]] && continue
    [[ $c = 0 ]] && c=O
    [[ $c = 1 ]] && c=L
    [[ $c = 8 ]] && c=B
    idx=${v%%${c}*}
    if [[ $idx = $v ]]; then
      printf 'Erroneous char: %s\n' "$c" >&2
      continue
    fi
    (( buffer <<= 5 ))
    (( val = 10#${#idx} ))
    (( buffer |= val, bitsLeft += 5 ))
    if (( bitsLeft >= 8 )); then
      (( bitsLeft -= 8 ))
      printf -v hex '%s%02x' "$hex" "$(( ( buffer >> bitsLeft ) & 0xFF ))"
    fi
  done
  printf '%s\n' "$hex"
}

add_token() {
  issuer=$1

  if [ -z "${issuer}" ]; then
      echo "issuer is unset or set to the empty string"
      exit -1
  fi

  secret=$2

  if [ -z "${secret}" ]; then
      echo "secret is unset or set to the empty string"
      exit -1
  fi

  hash=$3

  if [ -z "${hash}" ]; then
      hash="sha1"
  fi

  period=$4

  if [ -z "${period}" ]; then
      period="30"
  fi
  
  digits=$5

  if [ -z "${digits}" ]; then
      digits="6"
  fi
  
  tokens+=( "$issuer" "$secret" "$hash" "$period" "$digits" )
}

remove_token() {
  issuer=$1

  if [ -z "${issuer}" ]; then
      echo "issuer is unset or set to the empty string"
      exit -1
  fi

  index=$(find_token_index $@)

  if [ -n "${index}" ]; then
    unset tokens[$index]
    unset tokens[$index+1]
    unset tokens[$index+2]
    unset tokens[$index+3]
    unset tokens[$index+4]
    
    tokens=( "${tokens[@]}" )
  fi
}

load_tokens() {
  if [ -e $savefile ]; then
    read -r -p 'Ciphertext(HEX): ' txt < "$savefile" 

    while IFS= read -r line; do
      tokens+=($line)
    done < $savefile
  fi
}

save_tokens() {
  txt=""

  for ((i = 0; i < ${#tokens[@]}; i += 5)); do
    txt="${txt}${tokens[i]} ${tokens[i+1]} ${tokens[i+2]} ${tokens[i+3]} ${tokens[i+4]}\n"
  done

  printf "$txt" > "$savefile"
}

print_tokens() {
  issuer=$1

  for ((i = 0; i < ${#tokens[@]}; i += 5)); do
    if [ -z "${issuer}" ]; then
      printf '%16s %8s\n' "${tokens[i]}" "$(totp "$(base32d "${tokens[i+1]}")" "${tokens[i+2]}" "${tokens[i+3]}" "${tokens[i+4]}")"
    elif [[ $issuer == "${tokens[i]}" ]]; then
      printf '%s\n' "$(totp "$(base32d "${tokens[i+1]}")" "${tokens[i+2]}" "${tokens[i+3]}" "${tokens[i+4]}")"
    fi
  done
}

find_token_index() {
  issuer=$1

  for ((i = 0; i < ${#tokens[@]}; i += 5)); do
    if [[ $issuer == "${tokens[i]}" ]]; then
      echo $i
    fi
  done
}

case $COMMAND in
  "add")
    load_tokens ${@:2}
    add_token ${@:2}
    save_tokens ${@:2}
    ;;

  "remove")
    load_tokens ${@:2}
    remove_token ${@:2}
    save_tokens ${@:2}
    ;;

  "get")
    load_tokens ${@:2}
    print_tokens ${@:2}
    ;;

  "help")
    printf '%s\n' "add issuer, key[, hash[, step[, digits]]] => adds token"
    printf '%s\n' "remove issuer => removes token by issuer"
    printf '%s\n' "get [issuer] => returns token(s)"
    ;;

  *)
    echo "Unknown command. Type help to get list of all commands."
    ;;
esac