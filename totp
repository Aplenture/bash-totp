#!/bin/bash
# Scott Nicholas <scott@nicholas.one> feb 2018

# TODO:
# back to the user-selectable width in swab function
# pad80 the xxtea key if < 128 bit, or sha1 it

# bash3 compat
if (( ${BASH_VERSINFO[0]} < 4 )); then
  toupper() { echo "$1" | tr '[:lower:]' '[:upper:]'; }
  epoch() { awk 'BEGIN{srand(); print srand()}'; }
else
  toupper() { printf '%s' "${1^^}"; }
  epoch() { printf '%(%s)T' -1; }
fi

swab() {
  local i h hex v=$1
  for ((i = 0; i < ${#v}; i += 8)); do
    h=${v:i:8}
    printf -v hex '%s%s' "$hex" "${h:6:2}${h:4:2}${h:2:2}${h:0:2}"
  done
  printf '%s\n' "$hex"
}

# str2hex(str, [padded width])
#          str: arbitary string
# padded width: add zeros until this width
str2hex() {
  local str=$1 pad=${2:- 0} i hex

  for ((i = 0; i < ${#str}; i++)); do
    printf -v hex '%s%02x' "$hex" "'${str:i:1}"
  done
  while (( pad && ${#hex} % pad )); do
    hex="${hex}00"
  done
  printf '%s' "$hex"
}

hex2str() {
  local hex=$1 i str

  for ((i = 0; i < ${#hex}; i+=2)); do
    printf -v str "%s\x${hex:i:2}" "$str"
  done
  printf '%s' "$str"
}

# pad80(in, c)
#   in: hex string input
#    c: congruency
pad80() {
  local in=$1 c=$2

  printf -v in '%s80' "$in"
  while (( ${#in} % 128 != c )); do
    printf -v in '%s00' "$in"
  done
  printf '%s\n' "$in"
}

##########################################################################
# XXTEA in bash
# Reference implementation from: https://en.wikipedia.org/wiki/XXTEA 
##########################################################################

# xxtea(key, text, d)
#   key: is hex string of 16 byte (128 bit) length
#   text: hex-string of arbitrary length
#   d: anything here means to decrypt instead of encrypt
xxtea() {
  local key=$1 text=$2 d=$3 i t hex m=$((0xFFFFFFFF))
  local v n k z y sum e p q delta=2654435769 #0x9e3779b9

  #make k an array of 32-bit int
  for ((n = i = 0; i < ${#key}; i += 8)); do
    k[n++]=$(( 16#${key:i:8} ))
  done
  #make v an array of 32-bit int
  for ((n = i = 0; i < ${#text}; i += 8)); do
    v[n++]=$(( 16#${text:i:8} ))
  done

  ((q = 6 + 52/n))
#  declare -p v k q >&2
  if [[ -z "$d" ]]; then
    (( z = v[n-1], sum = 0 ))

    while ((q-- > 0)); do
      (( sum += delta, e = (sum >> 2) & 3 ))
      for ((p = 0; p < n - 1; p++)); do
        ((
          y = v[p+1],
          mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z),
          z = v[p] = ( v[p] + mx ) & m
        ))
      done
      ((
        y = v[0],
        mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z),
        z = v[n-1] = ( v[n-1] + mx ) & m
      ))
    done
  else
    (( sum = (q * delta) & m, y = v[0] ))

    while ((q-- > 0)); do
      (( e = (sum >> 2) & 3 ))
      for ((p = n - 1; p > 0; p--)); do
        ((
          z = v[p-1],
          mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z),
          y = v[p] = (v[p] - mx) & m
        ))
      done
      ((
        z = v[n-1],
        mx = (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[(p&3^e)]^z),
        y = v[0] = ( v[0] - mx ) & m,
        sum -= delta
      ))
    done
  fi

#  declare -p v >&2
  hex=''
  for ((i = 0; i < ${#v[@]}; i++)); do
    printf -v h '%08X' "${v[i]}"
    printf -v hex '%s%s' "$hex" "${h:6:2}${h:4:2}${h:2:2}${h:0:2}" >&2
  done
#  printf 'H: %s\n' "$hex" >&2
  echo "$hex"
}

test_tea() {
  local key plaintext ciphertext enc dec txt

  while read -r key plaintext ciphertext; do
    key=$(swab "$key")
    plaintext=$(swab "$plaintext")
    enc=$(xxtea "$key" "$plaintext")
    dec=$(xxtea "$key" "$(swab "$enc")" d)
    txt=$(hex2str "$dec")
    printf 'Plaintext[%s] Encrypted[%s] Expected[%s] Decrypted[%s] Text[%q]\n' "$plaintext" "$enc" "$(toupper "$ciphertext")" "$dec" "$txt"
  done << EOF
00000000000000000000000000000000 0000000000000000 ab043705808c5d57
0102040810204080fffefcf8f0e0c080 0000000000000000 d1e78be2c746728a
9e3779b99b9773e9b979379e6b695156 ffffffffffffffff 67ed0ea8e8973fc5
0102040810204080fffefcf8f0e0c080 fffefcf8f0e0c080 8c3707c01c7fccc4
74657374746573747465737474657374 7465737474657374 F11330C52AAE7923
5baa61e4c9b93f3f0682250b6cf8331b $(str2hex "Hello World!" 8) 9E5CFC488DD42033C29F20C3
EOF
}

do_tea() {
  local pass sha1 key ans line

  read -rs -p 'Passphrase: ' pass < /dev/tty
  sha1=$(sha1 "$(str2hex "$pass")")
  key=${sha1:0:32}
  printf '\nKey: %s\n' "$key"
  read -r -p '(e)ncrypt / (d)ecrypt: ' ans
  case $ans in
    e)
      printf 'End with "." alone on last line\n'
      while read -r line; do
        [[ $line = '.' ]] && break
        input+=$line$'\n'
      done
      xxtea "$(swab "$key")" "$(swab "$(str2hex "$input" 8)")"
      ;;
    d)
      printf 'Expecting single line of HEX\n'
      read -r input
      hex2str "$(xxtea "$(swab "$key")" "$(swab "$input")" d)"
      ;;
  esac
}

##########################################################################
# SHA-1 in bash
# Reference implementation from: https://en.wikipedia.org/wiki/SHA-1
##########################################################################

sha1_hmac() {
  local key=$1 msg=$2 i
  # key needs to be same as sha1 blocksize
  if (( ${#key} > 128 )); then
    key=$(sha1 "$key")
  fi
  while (( ${#key} < 128 )); do
    key=${key}00
  done

  #xor key 32-bit at a time
  for ((i = 0; i < 128; i += 8)); do
    printf -v ipad '%s%08X' "$ipad" "$(( ( ( 16#${key:i:8} ) ^ 0x36363636 ) & 0xFFFFFFFF ))"
    printf -v opad '%s%08X' "$opad" "$(( ( ( 16#${key:i:8} ) ^ 0x5C5C5C5C ) & 0xFFFFFFFF ))"
  done

  sha1 "${opad}$(sha1 "${ipad}${msg}")"
}

sha1() {
  local in=$1 msg
  local h0 h1 h2 h3 h4
  local a b c d e f
  local i j temp len plen chunk w
  local m=$((0xFFFFFFFF)) #32-bit mask

  (( h0=0x67452301, h1=0xEFCDAB89, h2=0x98BADCFE, h3=0x10325476, h4=0xC3D2E1F0 ))

  (( len = ${#in} << 2 ))
  msg=$(pad80 "$in" 112)
  printf -v msg '%s%016X' "$msg" "$len"
  plen=${#msg}
  
  # 512-bit chunks = 128 hex chars
  for ((i = 0; i < plen; i += 128)); do
    chunk=${msg:i:128} 
    for ((j = 0; j < 16; j++)); do
      # convert to 32-bit int now
      w[j]=$(( 16#${chunk:8 * j:8} ))
    done
    # extend into 80 qwords
    for ((j = 16; j <= 79; j++)); do
      (( w[j] = w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16] ))
      # left rotate 1 with shift
      (( w[j] = ( w[j] >> 31 ) | ( w[j] << 1 ) ))
      (( w[j] &= m ))
    done
    (( a = h0, b = h1, c = h2, d = h3, e = h4 ))
    for ((j = 0; j <= 79; j++)); do
      if (( j <= 19 )); then
        (( k = 0x5A827999, f = ( b & c ) | (~b & d) )) 
      elif (( j <= 39 )); then
        (( k = 0x6ED9EBA1, f = b ^ c ^ d )) 
      elif (( j <= 59 )); then
        (( k = 0x8F1BBCDC, f = (b & c) | (b & d) | (c & d) )) 
      else
        (( k = 0xCA62C1D6, f = b ^ c ^ d )) 
      fi
      (( f &= m ))
      (( temp = ( ( a << 5 ) | ( a >> 27 ) ) + f + e + k + w[j] ))
      (( temp &= m ))
      (( e = d, d = c, c = ( b >> 2 ) | ( b << 30 ), b = a, a = temp ))
    done
    (( h0 += a, h1 += b, h2 += c, h3 += d, h4 += e ))
    (( h0 &= m, h1 &= m, h2 &= m, h3 &= m, h4 &= m ))
  done
  printf '%08x%08x%08x%08x%08x\n' "$h0" "$h1" "$h2" "$h3" "$h4"
}

##########################################################################
# TOTP in bash
##########################################################################

# totp(key[, step[, digits]])
#    key: hex encoded
#   step: usually 30 seconds
# digits: 6 (default) or 8
totp() {
  local key=$1 step=${2:- 30} digits=${3:- 6} time

  time=$(epoch)
  printf -v step '%016X' "$((time / step))"
  dgst=$(sha1_hmac "$key" "$step")
  offset=$(( 2 * 16#${dgst: -1} ))
  token=$(( ( 16#${dgst:offset:8} & 0x7fffffff ) % 10**digits ))
  printf '%06d\n' "$token"
}

base32d() {
  local in=$(toupper "$1") c buffer idx bitsLeft=0 count=0 result
  local v='ABCDEFGHIJKLMNOPQRSTUVWXYZ234567!'
  for ((i = 0; i < ${#in}; i++ )); do
    c=${in:i+j:1}
    [[ $c = [[:space:]-] ]] && continue
    [[ $c = 0 ]] && c=O
    [[ $c = 1 ]] && c=L
    [[ $c = 8 ]] && c=B
    idx=${v%%${c}*}
    if [[ $idx = $v ]]; then
      printf 'Erroneous char: %s\n' "$c" >&2
      continue
    fi
    (( buffer <<= 5 ))
    (( val = 10#${#idx} ))
    (( buffer |= val, bitsLeft += 5 ))
    if (( bitsLeft >= 8 )); then
      (( bitsLeft -= 8 ))
      printf -v hex '%s%02x' "$hex" "$(( ( buffer >> bitsLeft ) & 0xFF ))"
    fi
  done
  printf '%s\n' "$hex"
}

##########################################################################
# main..?
##########################################################################

savefile="tokens.save"

add_token() {
  read -r -p 'Issuer: ' issuer
  read -r -p 'Base32 secret: ' secret
  read -r -p 'Period: ' period
  read -r -p 'Digits (6 or 8): ' digits
  tokens+=( "$issuer" "$secret" "$period" "$digits" )
}

save_tokens() {
  local key txt enc

  read -r -p 'Encryption key: ' key
  key=$(sha1 "$(str2hex "$key")")
  key=$(swab "${key:0:128}")
  txt=$(swab "$(str2hex "$(declare -p tokens)")")
  enc=$(xxtea "$key" "$txt")
  printf '%s\n' "$enc" > "$savefile"
}

load_tokens() {
  local key txt dec
  read -r -p 'Encryption key: ' key
  key=$(sha1 "$(str2hex "$key")")
  key=$(swab "${key:0:128}")
  read -r -p 'Ciphertext(HEX): ' txt < "$savefile" 
  dec=$(xxtea "$key" "$(swab "$txt")" d)
  [[ $dec = 6465636C617265* ]] || {
    printf 'Unable to decrypt. Check key.\n' >&2
    return 1
  }
  printf '%s\n' "$dec"
}

tokens=(
  "google"   "twok vr4i mpz3 e6fs 4s5w kh5q ibxx bpwy" 30 6
  "facebook" "koni tih7 tjjm t46q plod fztp c6no tgjs" 30 6
  "github"   "5e2i zsml 5qq7 xsu2 26la msgq w6yw 4wej" 30 6
)

while :; do
  for ((i = 0; i < ${#tokens[@]}; i += 4)); do
    printf '%16s %8s\n' "${tokens[i]}" "$(totp "$(base32d "${tokens[i+1]}")" "${tokens[i+2]}" "${tokens[i+3]}")"
  done
  printf '(A)dd (D)el (S)ave (L)oad (T)est (X)XTEA (Q)uit: '
  read -r ans
  case $ans in
    A*|a*) add_token ;;
    D*|d*) del_token ;;
    S*|s*) save_tokens ;;
    L*|l*) load_tokens ;;
    T*|t*) test_tea ;;
    X*|x*) do_tea ;;
    Q*|q*) exit 0 ;;
  esac
done
